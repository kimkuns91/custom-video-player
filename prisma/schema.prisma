datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  email              String        @unique
  password           String?
  name               String
  profileImageUrl    String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  subscription       Subscription?
  watchedContents    WatchedContent[]
  inProgressContents InProgressContent[]
  socialLogins       SocialLogin[]

  @@map("users")
}

model Subscription {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean

  @@map("subscriptions")
}

model WatchedContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  contentId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])
  watchedAt DateTime @default(now())

  @@unique([userId, contentId])
  @@map("watched_contents")
}

model InProgressContent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  contentId   String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  content     Content  @relation(fields: [contentId], references: [id])
  lastWatched DateTime @default(now())
  progress    Int      // e.g., in seconds or percentage

  @@unique([userId, contentId])
  @@map("in_progress_contents")
}

model SocialLogin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  provider    String   // e.g., 'google', 'facebook'
  providerId  String   // The user's ID from the provider
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@map("social_logins")
}

model Content {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String    // 제목
  titleImageUrl   String?   // 제목 이미지 URL
  description     String?   // 설명
  videoUrl        String?   // 비디오 URL
  trailerUrl      String?   // 예고편 URL
  uploadDate      DateTime  @default(now()) // 업로드 날짜
  releaseDate     DateTime? // 개봉일
  duration        Int?      // 러닝 타임
  resolution      String?   // 해상도
  adult           Boolean   // 성인용 컨텐츠 여부
  originalLanguage String?  // 원본 언어
  tags            String[]  // 태그
  directorId      String?   @db.ObjectId
  director        Director? @relation(fields: [directorId], references: [id], name: "DirectorContents") // 감독

  popularity      Float?    // 인기도
  voteAverage     Float?    // 평균 평점
  voteCount       Int?      // 평점 투표 수
  backdropUrl     String?   // 배경 이미지 URL
  posterUrl       String?   // 포스터 이미지 URL
  
  type            ContentType
  episodes        Episode[]
  actors          ContentActor[]
  genres          ContentGenre[]
  countries       ContentCountry[]
  watchedContents    WatchedContent[]
  inProgressContents InProgressContent[]
  @@map("contents")
}

model Episode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String  // 에피소드 제목
  description String? // 에피소드 설명
  videoUrl    String  // 에피소드 비디오 URL
  uploadDate  DateTime  @default(now()) // 업로드 날짜
  releaseDate DateTime? // 개봉일
  duration    Int?  // 러닝 타임
  resolution  String? // 해상도
  tags        String[]
  season      Int // 시즌
  episode     Int // 에피소드
  posterUrl   String?  // 에피소드 포스터 이미지 URL
  contentId   String   @db.ObjectId
  content     Content  @relation(fields: [contentId], references: [id])

  @@map("episodes")
}

model Director {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  contents  Content[]  @relation(name: "DirectorContents")

  @@map("directors")
}

model Actor {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  contents  ContentActor[]  // 중간 테이블과의 관계

  @@map("actors")
}

model ContentActor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String   @db.ObjectId
  actorId     String   @db.ObjectId

  content     Content  @relation(fields: [contentId], references: [id])
  actor       Actor    @relation(fields: [actorId], references: [id])

  @@unique([contentId, actorId]) // 고유 제약 조건 설정
}

model Genre {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  contents  ContentGenre[]  // 중간 테이블과의 관계

  @@map("genres")
}

model ContentGenre {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String   @db.ObjectId
  genreId     String   @db.ObjectId

  content     Content  @relation(fields: [contentId], references: [id])
  genre       Genre    @relation(fields: [genreId], references: [id])

  @@unique([contentId, genreId]) // 고유 제약 조건 설정
}

model Country {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  contents  ContentCountry[]  // 중간 테이블과의 관계

  @@map("countries")
}

model ContentCountry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String   @db.ObjectId
  countryId   String   @db.ObjectId

  content     Content  @relation(fields: [contentId], references: [id])
  country     Country  @relation(fields: [countryId], references: [id])

  @@unique([contentId, countryId]) // 고유 제약 조건 설정
}

enum ContentType {
  MOVIE
  SERIES
}
